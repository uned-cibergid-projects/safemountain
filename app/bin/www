#!/usr/bin/env node

const CONFIG = require('../config')[process.env.NODE_ENV || 'development'];

const app = require('../app');
const debug = require('debug')('metadata:server');

const http = require('http');

const PORT = normalizePort(CONFIG.PORT || '8020');
app.set('port', PORT);

var server = http.createServer(app);

// Listen on provided port, on all network interfaces.

server.listen(PORT);
server.on('error', onError);

server.on('listening', onListening);

// handle server shutdown, gracefully
const serverCloseHandler = exitCode => () => {
  server.close(() => {
    debug('+++++++++ Aplicativo cerrÃ¡ndose')
    process.exit(exitCode);
  });
};

process.on('uncaughtException', serverCloseHandler(1));
process.on('unhandledRejection', serverCloseHandler(1));

['SIGINT', 'SIGTERM', 'SIGHUP'].forEach(signal => {
  process.on(signal, serverCloseHandler(0));
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof PORT === 'string'
    ? 'Pipe ' + PORT
    : 'Port ' + PORT;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
